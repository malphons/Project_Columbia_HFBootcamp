function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 15-Sep-2017 12:42:04.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 15xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 15xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 15xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.00122383946920757;-0.00165216856730099;-0.00202946192250997;-0.00236049184627474;-0.00358262772260431;-0.00466953473062137;-0.00640369243936345;-0.000925242855104758;0;1.46341463413465;9.55056179775238;12.3222748815207;15.6862745098212;20.1388888888867;26.539753639419];
x1_step1.gain = [618.466686799384;451.206858674741;367.048147879418;396.853294698864;350.786781554829;296.202997852945;201.850817131137;1336.45108739847;0.02;0.0206803629830945;0.0254739031395447;0.0277810765457616;0.030475908737944;0.0356158757087308;0.0435851543143888];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = -0.00640369243936345;
x2_step1.gain = 201.850817131137;
x2_step1.ymin = -1;

% Layer 1
b1 = [-1.4302288169620057;-1.3215253778368468;-0.859735320909496;0.36502421064008672;0.420184627367715;0.21881451334492674;-0.46771724058004976;0.78247390483531665;-1.3433197978215126;1.5121290499543583];
IW1_1 = [-0.0081116731447421972 0.05990246110844958 -0.25678661992317819 -0.022187485899866334 -0.29622460673982998 -0.27541336260899751 -0.33875067053168822 0.34221134302195499 -0.043906754147428534 -0.21320222025962215 -0.3518299652292442 -0.39920440238440308 -0.33999714712623075 -0.34586934971195343 -0.5061869520849569 0.02880886645878819 0.00022379838942058333 -0.29595447676820125 -0.23916225997555987 -0.16728804678734355 -0.27429748601162024 0.21197094289736118 0.35771867375718386 -0.092941005260112008 -0.36019627815368638 -0.21533425996944069 -0.21402674859665669 -0.29456054195096748 -0.066953792871502632 -0.19703927330665497;0.21051728675182252 -0.31175102210155525 -0.38005446883258903 0.29318920961712663 -0.33078663791706764 0.2530710792581688 0.25600568913198751 -0.13981037080334971 0.0062396867755334789 -0.40187728482611029 0.043669409878167087 -0.24017873545861024 0.46535758834153684 -0.34592211569202785 -0.65476581932787026 -0.060459671661505315 0.43488138222543093 0.26483023179851628 0.037667231307353888 -0.34360509174972598 0.13582230308593651 -0.25383603530566234 -0.27395604410366875 0.11435109599697713 0.12376250640986007 -0.011379565643830122 -0.15211657485358229 0.025625810745683236 -0.2243631651662375 -0.16557709034759191;-0.011450550655306091 0.17028728862828965 0.14726302974126185 0.36601923606142678 -0.28022643765548272 0.36846674101243865 -0.10969790967588686 0.038132076711506528 0.47236943102509465 0.14438737754837538 0.24442336677650761 -0.33772860711102309 -0.055918612544033755 0.24682694597394744 0.23640115528286115 -0.38054339686891253 0.32503772850230606 -0.37758064275871628 0.37095086009749995 -0.37339738646357279 -0.4058336291670086 0.05067026763408837 -0.25269707196750851 0.24179588144886793 0.23877465043344073 -0.36271816145619107 -0.40241050477070339 -0.016836695210363517 0.217752166385347 -0.061380260103785604;-0.57406583579538595 -0.046036761644534477 -0.17154316060725158 -0.29434471202033929 -0.23410004891783995 0.391366285278205 -0.1027935528523445 -0.32841126101687973 -0.038824392603253349 -0.043003998192116533 0.04969360679551503 -0.099522321606017899 0.023320153487040862 0.42292589955080984 0.16125341485243433 0.22377229023038153 0.2847363909545057 -0.39962689248694255 0.122953633608124 0.18525602125963153 -0.25363466593720996 0.25949645397111959 0.13629690756968268 -0.21280814426303379 0.33208651753604868 -0.28158020691208901 0.24577802689215322 -0.22361687899954158 0.3482742335743883 -0.17698928956956667;-0.094782278749094423 -0.45802281935010686 0.061586143441729066 0.014730742400714258 0.28141820784519667 0.5941063784858962 -0.12754627491261281 -0.22777870209750217 0.11150435272579265 -0.20138707605396308 -0.14965538730660816 -0.16103204417355521 -0.3784598195361486 0.21189672641536236 0.009230360646731911 -0.046632695212477079 -0.5794659368432199 0.1283507023247645 -0.23668590213612009 -0.21782206539180055 -0.20525448360292792 0.051493849043800041 -0.037035496346219304 -0.037423075738593756 -0.033470544967239418 -0.1007240172617951 0.3171665559388413 0.11426983514747938 -0.12594176167269894 -0.049479189474691022;0.05956346664156803 0.053601084359943291 0.23260919654828835 -0.048862994818802102 0.12416386643042894 0.33360052042408606 0.0023245941321567778 0.29838060032382496 -0.15369911498381753 -0.27798583002251753 0.14084691789152826 0.43093919983772533 -0.13143456421017255 -0.40415216547831079 0.13003890990070144 -0.0084709977693103178 -0.39595243062530583 -0.18149695866218282 -0.32646842460889358 -0.1008964517186455 0.060795329965223105 0.16977666632832997 0.4390416923204874 0.12016499475236134 -0.30973397398156005 -0.17555795845101121 0.10436864081557501 0.14791971177417518 0.16401801901006235 -0.11070312949037206;-0.096514600232221054 -0.31184468568805201 -0.016328935555729892 0.0972711745616857 -0.45876184865806713 0.038660707689745798 0.17227394612353436 -0.16471116727132876 0.41400110393649436 0.44871626367584155 -0.1990244722394508 -0.29217732862435847 -0.4581131394199161 0.35693371444909161 0.13323357963531976 0.27033840028613437 -0.35370410821357262 0.17530002167271497 -0.11594593003262103 0.036070279900671548 -0.38665403463835363 0.28564718054810051 -0.067134043875535343 0.35624990905817389 0.17112254236132388 -0.22060894171349713 -0.061380187553485163 0.51176918569985952 -0.239664937505978 0.27271649648180857;0.13277453649338419 -0.42336799962269323 -0.028703253142022496 -0.25324360318715633 0.34199253319303635 -0.27772541796082001 -0.25951307640389731 0.3865203632500307 0.12993080006637461 -0.024101458453355068 -0.5101702563058077 -0.54340357585507781 -0.042854042137092152 -0.10776843934315727 0.42805679823571163 -0.3943510010988191 0.3031112034303664 0.20012123727938119 0.12003713102359742 -0.26373438082493034 -0.08919782902673537 0.039494840110106344 -0.14619360414484975 -0.32035922210502776 -0.34238205321478332 0.25235748531739804 -0.27328295382768508 -0.056506305062764911 -0.11619774169154228 0.057849051843709455;-0.11667143867476179 -0.19335874663096764 -0.051986653675458468 -0.20791056879973493 0.12232678042259559 -0.32732730675179234 0.11325962575318979 -0.47888057136984818 -0.28816615854781519 0.22214974388359032 -0.25881065967033207 -0.10588083161078787 0.24241006226981926 -0.27685485490045936 -0.18495603336115493 -0.29493376043035685 0.44418319705760351 0.032981765067091905 0.16131911231633128 0.20911415340731554 -0.49033036310257322 0.21616217294989909 -0.50428596054052943 -0.058279564809836204 -0.37017199192405947 -0.10776634556066385 -0.030105301321414014 -0.028277506979053443 0.14121134308279792 0.16505194210447088;-0.018817617627060301 -0.26130318313325773 -0.29760507492268046 0.42896403310193543 0.25026400317554137 -0.29800262309425313 0.054746318953472407 0.43719541728121664 -0.2007956654097669 0.33610144599482428 0.29150721107823796 0.011064798289172041 0.13186704680855998 0.15261316519056606 -0.011648609835161222 0.053712719983204149 0.23605406333106838 0.29806240487957508 0.31224975776975145 -0.079599354173753217 -0.25791898183007878 -0.23782136602181655 0.29395903486114494 -0.31233297691516415 -0.35457509652936747 0.21398704924427989 0.6252921998099773 -0.32549256875551646 0.14042003696800506 -0.17748371633472199];
IW1_2 = [-0.2494709107220775 0.25038426118182078;-0.1958349789833923 0.094673421093446869;-0.19987131562972199 -0.28533427983841037;0.036294459448974845 0.23827960890664013;0.62817804701155533 0.000959728710583549;0.41745633182185732 -0.28483891096079217;0.11374984690220945 -0.37879909118539512;-0.30379166868431828 0.47226930125611455;0.057175387647627474 -0.53193312427769823;0.53581767647786194 -0.29003387973085049];

% Layer 2
b2 = 0.28971944599656624;
LW2_1 = [0.062379736302142053 0.87441439383997799 0.14930527653435341 0.14459957623491149 -0.30680064274193342 0.25442935595167249 0.17078550455977032 0.13995487896695627 -0.54326738942140651 0.46732751669469852];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 201.850817131137;
y1_step1.xoffset = -0.00640369243936345;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
